<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>post_tiger_01</title>
    <url>/posts/80963018/</url>
    <content><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>timer（内核定时器）函数及其用法（初级）</title>
    <url>/posts/bcb13dab/</url>
    <content><![CDATA[<h1 id="timer（内核定时器）函数及其用法（初级）"><a href="#timer（内核定时器）函数及其用法（初级）" class="headerlink" title="timer（内核定时器）函数及其用法（初级）"></a>timer（内核定时器）函数及其用法（初级）</h1><h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><ol start="0">
<li>本文有demo版本，见：<a href="https://github.com/tigermini/kernel_subsystem/tree/main/timer" target="_blank">timer实例</a>，可以结合代码一起看本文。</li>
<li>由于timer的函数接口在不同的内核版本大有不同，所以导致某些函数在某些版本不适用，本文所使用的代码版本为<strong>linux-5.10.60</strong>，其他版本的内核需要检查下函数接口。</li>
<li>从timer框架层面来说，没有太大变化，整体的设计思想要是弄明白了，timer也就完全够用了。</li>
<li>本文是timer的<strong>初级文章</strong>，只介绍关键的数据结构和函数，不做深入探究，在后续的<strong>中级文章</strong>中，我们会去探究timer硬件层面的设计。</li>
</ol>
<h2 id="timer原理（初级）"><a href="#timer原理（初级）" class="headerlink" title="timer原理（初级）"></a>timer原理（初级）</h2><p>linux kernel 提供了内核定时器机制，其核心是由硬件产生中断来追踪时间流动情况，定时器到期(expires)后，会执行指定的某个具体的函数(function)。</p>
<h2 id="timer代码分析"><a href="#timer代码分析" class="headerlink" title="timer代码分析"></a>timer代码分析</h2><p><strong>再次说明：下面的代码是基于linux-5.10.60，可能与你正在使用的内核有一定的差别，一切以你正在使用的内核为准，本文只做引导分析，让你知道如何使用timer。</strong></p>
<h3 id="关键数据结构"><a href="#关键数据结构" class="headerlink" title="关键数据结构"></a>关键数据结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位于include/linux/timer.h,只关注下面的几项，其他项在中级文章中再做解释</span></span><br><span class="line"><span class="comment"> * @expires：到期时间，即定时器在什么时间点后到期，注意：当前的时间为jiffies，不懂jiffies的自行google</span></span><br><span class="line"><span class="comment"> * @function：回调函数，即timer到期后要执行的函数，注意：此函数的入参和返回值要符合下面的要求</span></span><br><span class="line"><span class="comment"> * tips ：在旧版还有一个data的项，那是给函数入参用的，当前内核已经废弃</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> &#123;</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * All fields that change during normal runtime grouped to the</span></span><br><span class="line"><span class="comment">	 * same cacheline</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>	<span class="title">entry</span>;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span>		expires;</span><br><span class="line">	<span class="keyword">void</span>			(*function)(struct timer_list *);</span><br><span class="line">	u32			flags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_LOCKDEP</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lockdep_map</span>	<span class="title">lockdep_map</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h3><ol>
<li>函数使用流程：<br>初始化（初始化函数中）-&gt;添加到内核timer中（初始化函数中）-&gt;重新添加到内核timer中（回调函数中）-&gt;注销（注销函数中）</li>
<li>函数的实际用法可以参考文章前面的链接，也就是：<a href="https://github.com/tigermini/kernel_subsystem/tree/main/timer" target="_blank">timer实例</a></li>
<li>具体的函数如下</li>
</ol>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @timer: the timer in question 定时器名</span></span><br><span class="line"><span class="comment"> * @callback: the function to call when timer expires 回调函数</span></span><br><span class="line"><span class="comment"> * @flags: any TIMER_* flags 定时器标记，一般填0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> timer_setup(timer, callback, flags)			\</span></span><br><span class="line"><span class="meta">	__init_timer((timer), (callback), (flags))</span></span><br></pre></td></tr></table></figure>
<p>调用timer_setup后还要进行如下赋值操作：<br>timer.expires = xxx;<br>在旧的版本里面用的是init_timer(timer)接口，所以旧版本除了上面还有额外的赋值操作：<br>timer.data = 0;<br>timer.function = funcyyy;</p>
<h4 id="注册-开启-timer"><a href="#注册-开启-timer" class="headerlink" title="注册/开启 timer"></a>注册/开启 timer</h4><p>timer要生效，还要必须被连接到内核专用的链表中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @timer: the timer in question 定时器名 */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">add_timer</span><span class="params">(struct timer_list *timer)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="重新注册（修改）timer"><a href="#重新注册（修改）timer" class="headerlink" title="重新注册（修改）timer"></a>重新注册（修改）timer</h4><p>定时器在到期之后，如何不重新注册（修改）到内核，那么timer就不会再接着执行，这种有点类似“一次性”，所以我们要修改到期时间，让其接着运行（类似望梅止渴，就是让定时器程序一直看不到终点(到期时间)）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @timer: the timer in question 定时器名</span></span><br><span class="line"><span class="comment"> * @expires: 到期时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">mod_timer</span><span class="params">(struct timer_list *timer, <span class="keyword">unsigned</span> <span class="keyword">long</span> expires)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="注销timer"><a href="#注销timer" class="headerlink" title="注销timer"></a>注销timer</h4><p>在模块退出或者不再使用timer时，要将timer注销。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @timer: the timer in question 定时器名 */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">del_timer</span><span class="params">(struct timer_list * timer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT)</span></span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">del_timer_sync</span><span class="params">(struct timer_list *timer)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> del_timer_sync(t)		del_timer(t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这里要说明一下，注销timer有两个，我们一般用del_timer_sync这个函数就好了。</p>
<h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><p>当前还有一些其他的函数没有做介绍，因为一般情况下用不上，所以放到后续的中级文章中再做介绍。</p>
]]></content>
  </entry>
</search>
